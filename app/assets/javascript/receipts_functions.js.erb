//= require jquery
//= require jquery-ui

function beginningMatcher(data, request, response){
    let matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( request.term ), "i" );
    response( $.grep( data, function( item ){
        return matcher.test( item );
    }) );
}

function containsMatcher(data, request, response){
    let matcher = new RegExp($.ui.autocomplete.escapeRegex( request.term ), "i" );
    response( $.grep( data, function( item ){
        return matcher.test( item );
    }) );
}

$(document).ready(function(){
    //Location regex
    $('#receipt_location').autocomplete({
        source: function(request, response){
            beginningMatcher($('#receipt_location').data('autocomplete-source'), request, response)
        },
        minLength: 0
    }).focus(function () {
        $(this).autocomplete("search", $(this).val());
    });
    //Store regex
    $('#receipt_store').autocomplete({
        source: function(request, response){
            let stores = $('#receipt_store').data('autocomplete-source').filter(val => val[1] == $('#receipt_location').val()).map(val => val[0])
            beginningMatcher(stores, request, response)
        },
        minLength: 0
    }).focus(function () {
        $(this).autocomplete("search", $('#receipt_store').val());
    });
    //Details regex, event handler for dynamically added details
    $('body').on('focus', '[id^=receipt_receipt_details_][id $=_name]', function() {
        $(this).autocomplete({
            source: function(request, response){
                let category = $(this.element).parents("tr").find('select').find(':selected').text();
                let options = details_names.find(function(o){ return o.key===category }).value;
                containsMatcher(options, request, response)
            },
            minLength: 3
        }).focus(function () {
            $(this).autocomplete("search", $(this).val());
        });
    });

    <%= categories = ReceiptCategory.distinct.pluck(:name, :id).sort_by { |name, _| name.downcase } %>
    <%= details = ReceiptDetail.distinct.pluck(:name, :receipt_category_id).sort_by { |name, cat_id| [cat_id, name.downcase] } %>
    const details_names = [];
    <% categories.each do |name, id|%>
      details_names.push({
        key: "<%= name %>",
        value: <%= details.filter_map { |det_name, cat_id| det_name if cat_id == id } %>
      });
    <% end %>
});